<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-03-20T11:39:24+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Bill’s Random Notes</title><subtitle>Not much to see here, just a few notes from various hobby projects I do from time to time.</subtitle><entry><title type="html">Installing PHP on Ubuntu</title><link href="http://localhost:4000/virtualbox/2018/01/23/Installing-PHP.html" rel="alternate" type="text/html" title="Installing PHP on Ubuntu" /><published>2018-01-23T19:19:00+00:00</published><updated>2018-01-23T19:19:00+00:00</updated><id>http://localhost:4000/virtualbox/2018/01/23/Installing%20PHP</id><content type="html" xml:base="http://localhost:4000/virtualbox/2018/01/23/Installing-PHP.html">&lt;p&gt;Thanks to Ondřej Surý for maintaining PPA of latest PHP5 versions on launchpad. If you want to install specific version of php, then this article can be helpful for you. This article will help you for installing PHP 5.6 or PHP 7.1 using PPA on Ubuntu 16.10, 16.04 LTS, 14.04 LTS or 12.04 LTS systems. If you have already have higher version installed on your system and you need to install lower version, then you have to remove higher version first and remove apt repository from system.&lt;/p&gt;

&lt;h2 id=&quot;install-php-56-on-ubuntu&quot;&gt;Install PHP 5.6 on Ubuntu&lt;/h2&gt;

&lt;p&gt;Use the following set of command to add PPA for PHP 5.6 in your Ubuntu system and install PHP 5.6.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install python-software-properties
$ sudo add-apt-repository ppa:ondrej/php
$ sudo apt-get update
$ sudo apt-get install -y php5.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;check-installed-php-version&quot;&gt;Check Installed PHP Version:&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ php -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;install-php-71-on-ubuntu&quot;&gt;Install PHP 7.1 on Ubuntu&lt;/h2&gt;
&lt;p&gt;Use the following set of command to add PPA for PHP 7.1 in your Ubuntu system and install PHP 7.1.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install python-software-properties
$ sudo add-apt-repository ppa:ondrej/php
$ sudo apt-get update
$ sudo apt-get install -y php7.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;switch-between-php-versions&quot;&gt;Switch Between PHP Versions&lt;/h2&gt;

&lt;p&gt;If you have installed multiple php versions and want to use different than default. Use following steps to switch between php5.6 and php7.1 version. You can use the same command for other php versions.&lt;/p&gt;

&lt;h3 id=&quot;from-php-56--php-71&quot;&gt;From PHP 5.6 =&amp;gt; PHP 7.1&lt;/h3&gt;

&lt;p&gt;For Apache:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;a2dismod php5.6
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;a2enmod php7.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service apache2 restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For CLI:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;update-alternatives &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; php /usr/bin/php7.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;from-php-71--php-56&quot;&gt;From PHP 7.1 =&amp;gt; PHP 5.6&lt;/h3&gt;

&lt;p&gt;For Apache:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;a2dismod php7.1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;a2enmod php5.6
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service apache2 restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For CLI:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-alternatives &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; php /usr/bin/php5.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setup-xdebug&quot;&gt;Setup XDebug&lt;/h2&gt;

&lt;p&gt;The configuration file is found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/php/[ver]/apache2/conf.d/20-xdebug.ini&lt;/code&gt; where [ver] is 5.6 or 7.1. To enable xdebug
to work remotely from the local machine to the vagrant guest, use the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zend_extension=xdebug.so
xdebug.remote_enable=1
; xdebug.remote_connect_back=1
xdebug.remote_handler=dbgp
xdebug.remote_mode=req
xdebug.remote_host=10.0.2.2
xdebug.remote_port=9000
xdebug.remote_log=&quot;/home/vagrant/xdebug.log&quot;
; xdebug.remote_autostart=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The two commented out lines should not need to enabled&lt;/p&gt;

&lt;h3 id=&quot;debugging-with-vs-code&quot;&gt;Debugging with VS Code&lt;/h3&gt;

&lt;p&gt;The XDebug settings above will allow remote debugging from VS Code to the Vagrant VM.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install the PHP Debug extension&lt;/li&gt;
  &lt;li&gt;Go to the debug page in VS Code and open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; settings (via the gear icon)&lt;/li&gt;
  &lt;li&gt;add the path mapping, e.g.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pathMappings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;/var/www/web&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}/web&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;/var/www/protected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}/protected&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xdebug.remote_autostart=0&lt;/code&gt; you need to manually start the server sending XDebug&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For Firefox, install and use the &lt;strong&gt;theeasiestxdebug&lt;/strong&gt; extension, which adds a toolbar button to toggle debug&lt;/li&gt;
  &lt;li&gt;For CLI (running in VM), you need to run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export XDEBUG_CONFIG=&quot;idekey=xdebug&quot;&lt;/code&gt; before running the PHP script you want to debug&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;missing-packages-in-php-71&quot;&gt;missing packages in PHP 7.1&lt;/h2&gt;

&lt;p&gt;The default packaging of PHP7.1 on the box does not include the mbstring or mysqli functions. To install:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;php7.1-mbstring
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;php7.1-mysqli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="virtualbox" /><summary type="html">Thanks to Ondřej Surý for maintaining PPA of latest PHP5 versions on launchpad. If you want to install specific version of php, then this article can be helpful for you. This article will help you for installing PHP 5.6 or PHP 7.1 using PPA on Ubuntu 16.10, 16.04 LTS, 14.04 LTS or 12.04 LTS systems. If you have already have higher version installed on your system and you need to install lower version, then you have to remove higher version first and remove apt repository from system.</summary></entry><entry><title type="html">Forcing VM monitor size in VirtualBox</title><link href="http://localhost:4000/virtualbox/2018/01/15/virtualbox-monitor-force.html" rel="alternate" type="text/html" title="Forcing VM monitor size in VirtualBox" /><published>2018-01-15T18:53:00+00:00</published><updated>2018-01-15T18:53:00+00:00</updated><id>http://localhost:4000/virtualbox/2018/01/15/virtualbox-monitor-force</id><content type="html" xml:base="http://localhost:4000/virtualbox/2018/01/15/virtualbox-monitor-force.html">&lt;p&gt;You need to execute the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VBoxManage setextradata global GUI/MaxGuestResolution any
VBoxManage setextradata &lt;span class=&quot;s2&quot;&gt;&quot;Machine Name&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CustomVideoMode1&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Width x Height x Bpp&quot;&lt;/span&gt;
VBoxManage controlvm &lt;span class=&quot;s2&quot;&gt;&quot;Machine Name&quot;&lt;/span&gt; setvideomodehint Width Height Bpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The first command unlocks all possible display resolutions for virtual machines.&lt;/li&gt;
  &lt;li&gt;The second command defines a custom video mode for the specific virtual machine with name “Machine Name”.&lt;/li&gt;
  &lt;li&gt;Finally, the third command sets this custom video mode for your virtual machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;You must run these commands after the virtual machine has been started, when the guest operating system is ready to use and its Guest Additions are installed properly and loaded.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my case, I need to execute the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VBoxManage setextradata global GUI/MaxGuestResolution any
VBoxManage setextradata &lt;span class=&quot;s2&quot;&gt;&quot;Windows 7&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CustomVideoMode1&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1400x900x32&quot;&lt;/span&gt;
VBoxManage controlvm &lt;span class=&quot;s2&quot;&gt;&quot;Windows 7&quot;&lt;/span&gt; setvideomodehint 1400 900 32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="virtualbox" /><summary type="html">You need to execute the following commands:</summary></entry><entry><title type="html">SensorTag and Node-Red</title><link href="http://localhost:4000/node-red/2017/08/07/Sensortag-and-Node-Red.html" rel="alternate" type="text/html" title="SensorTag and Node-Red" /><published>2017-08-07T12:10:00+01:00</published><updated>2017-08-07T12:10:00+01:00</updated><id>http://localhost:4000/node-red/2017/08/07/Sensortag%20and%20Node-Red</id><content type="html" xml:base="http://localhost:4000/node-red/2017/08/07/Sensortag-and-Node-Red.html">&lt;p&gt;This experiment uses both a SensorTag and a Raspberry Pi&lt;/p&gt;

&lt;h2 id=&quot;bluetooth-le-on-raspberry-pi&quot;&gt;Bluetooth LE on Raspberry Pi&lt;/h2&gt;

&lt;p&gt;My Pi does not have BLE support as standard, so a BLE dongle is used. The basic instructions are here
https://developer.ibm.com/recipes/tutorials/ti-sensor-tag-and-raspberry-pi/&lt;/p&gt;

&lt;p&gt;Some commands:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo hciconfig [ up | down | reset ]
sudo hcitool lescan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pi-node-red-flow&quot;&gt;Pi Node-Red flow&lt;/h2&gt;

&lt;p&gt;The purpose of this flow running on the Pi is to connect to the sensortag using the sensortag node
installed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm i node-red-node-sensortag&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo node-red-start &amp;amp; 
sudo node-red-stop &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The flow supports some URL endpoints to set a global variable that controls the flow of the data to Watson IoT service.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bjraspi.local:1880/[ start | stop | status ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="node-red" /><summary type="html">This experiment uses both a SensorTag and a Raspberry Pi</summary></entry><entry><title type="html">Update vagrant ssh key</title><link href="http://localhost:4000/vagrant/2017/05/19/Update-vagrant-ssh.html" rel="alternate" type="text/html" title="Update vagrant ssh key" /><published>2017-05-19T13:08:00+01:00</published><updated>2017-05-19T13:08:00+01:00</updated><id>http://localhost:4000/vagrant/2017/05/19/Update%20vagrant%20ssh</id><content type="html" xml:base="http://localhost:4000/vagrant/2017/05/19/Update-vagrant-ssh.html">&lt;p&gt;If vagrant errors with as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;default: Warning: Authentication failure. Retrying...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;then the ssh key within the guest needs updating.&lt;/p&gt;
&lt;h2 id=&quot;find-the-identity-on-the-vagrant-host&quot;&gt;Find the identity on the vagrant host&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will result with something like this - it’s the identity file we need&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host default
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /Users/billjinks/.vagrant.d/boxes/bjscotch-VAGRANTSLASH-box/0/virtualbox/vagrant_private_key
  IdentitiesOnly yes
  LogLevel FATAL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;## Get the key
  Issue the following command to get the key we need for the guest (identity filename taken from above)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ssh-keygen -y -f /Users/billjinks/.vagrant.d/boxes/bjscotch-VAGRANTSLASH-box/0/virtualbox/vagrant_private_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Copy the output to the clipboard
  ## Apply key in guest
  Login to the guest using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant shh&lt;/code&gt; - you will need to login with a password. Once logged in, navigate to
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt; and edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorized_keys&lt;/code&gt; file. Add a line to the file and paste the key.&lt;/p&gt;</content><author><name></name></author><category term="vagrant" /><summary type="html">If vagrant errors with as follows: default: Warning: Authentication failure. Retrying... then the ssh key within the guest needs updating. Find the identity on the vagrant host vagrant ssh-config This will result with something like this - it’s the identity file we need Host default HostName 127.0.0.1 User vagrant Port 2222 UserKnownHostsFile /dev/null StrictHostKeyChecking no PasswordAuthentication no IdentityFile /Users/billjinks/.vagrant.d/boxes/bjscotch-VAGRANTSLASH-box/0/virtualbox/vagrant_private_key IdentitiesOnly yes LogLevel FATAL ## Get the key Issue the following command to get the key we need for the guest (identity filename taken from above) ssh-keygen -y -f /Users/billjinks/.vagrant.d/boxes/bjscotch-VAGRANTSLASH-box/0/virtualbox/vagrant_private_key Copy the output to the clipboard ## Apply key in guest Login to the guest using vagrant shh - you will need to login with a password. Once logged in, navigate to ~/.ssh and edit the authorized_keys file. Add a line to the file and paste the key.</summary></entry><entry><title type="html">How to repackage a Vagrant Box</title><link href="http://localhost:4000/vagrant/2017/05/14/Repackage-vagrant-box.html" rel="alternate" type="text/html" title="How to repackage a Vagrant Box" /><published>2017-05-14T18:18:00+01:00</published><updated>2017-05-14T18:18:00+01:00</updated><id>http://localhost:4000/vagrant/2017/05/14/Repackage-vagrant-box</id><content type="html" xml:base="http://localhost:4000/vagrant/2017/05/14/Repackage-vagrant-box.html">&lt;h2 id=&quot;ssh-into-the-box-and-customize-it&quot;&gt;SSH into the Box and Customize It&lt;/h2&gt;

&lt;p&gt;We’ll now SSH into the box and start customizing it. If you don’t know anything about servers,
you can always just use Scotch Box since all of this is already done for you. Here’s how to SSH into the box:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we need to setup our server by installing whatever we want on it. This example will install a basic LAMP stack,
but you can do whatever you like (Ruby, Nginx, etc.). The point of this article isn’t to teach you how to setup a server,
but instead how to turn your virtual environment into a Vagrant Box. So this step might be more involved than what is actually shown:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get install vim
sudo apt-get install apache2
sudo apt-get install mysql-server libapache2-mod-auth-mysql php5-mysql
sudo mysql_install_db
sudo /usr/bin/mysql_secure_installation
sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt
sudo apt-get install php5-cgi php5-cli php5-curl php5-common php5-gd php5-mysql
sudo service apache2 restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;make-the-box-as-small-as-possible&quot;&gt;Make the Box as Small as possible&lt;/h2&gt;

&lt;p&gt;We’re now going to clean up disk space on the VM so when we package it into a new Vagrant box,
it’s as clean as possible. First, remove APT cache&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then, “zero out” the drive (this is for Ubuntu):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dd if=/dev/zero of=/EMPTY bs=1M
sudo rm -f /EMPTY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lastly, let’s clear the Bash History and exit the VM:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /dev/null &amp;gt; ~/.bash_history &amp;amp;&amp;amp; history -c &amp;amp;&amp;amp; exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;repackage-the-vm-into-a-new-vagrant-box&quot;&gt;Repackage the VM into a New Vagrant Box&lt;/h2&gt;

&lt;p&gt;We’re now going to repackage the server we just created into a new Vagrant Base Box. It’s very easy with Vagrant:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant package --output mynew.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;add-the-box-into-your-vagrant-install&quot;&gt;Add the Box into Your Vagrant Install&lt;/h2&gt;

&lt;p&gt;The previous command will have created a “mynew.box” file. You can technically put this wherever you want on your computer. Now, let’s add this new Vagrant Box into Vagrant:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add mynewbox mynew.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This now will “download” the box into your Vagrant install allowing to initiate this from any folder, but before we do this, let’s delete and remove the Vagrant file we built this box from.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy
rm Vagrantfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;initialize-your-new-vagrant-box&quot;&gt;Initialize Your New Vagrant Box&lt;/h2&gt;

&lt;p&gt;We need to now initialize a Vagrant environment from our brand new box using the same command from earlier but referencing the new Box.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant init mynewbox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="vagrant" /><summary type="html">SSH into the Box and Customize It</summary></entry></feed>